openapi: 3.0.3
info:
  title: Swagger Recipe app - OpenAPI 3.0
  description: |-
    REST API for recipe App
  termsOfService: http://swagger.io/terms/
  version: 1.0.11
servers:
  - url: https://localhost:4400/api/
tags:
  - name: Recipe
    description: Platform for creating, learning, sharing about cooking
    
paths:
  # /user:
  #   get:
  #     tags:
  #       - get all users
  #     summary: get all users
  #     description: Get all users
  #     operationId: Getting
  #     responses:
  #       '200':
  #         description: Successful operation
  #         content:
  #           application/json:
  #             schema:
  #               $ref: '#/components/schemas/user'          
  #           application/xml:
  #             schema:
  #               $ref: '#/components/schemas/user'
  #       '404':
  #         description: Pet not found
  #   post:
  #     summary: Add a new user to the store
  #     description: Add a new user to the store
  #     operationId: addUser
  #     requestBody:
  #       description: Create a user pet in the store
  #       content:
  #         application/json:
  #           schema:
  #             $ref: '#/components/schemas/user'
  #         application/xml:
  #           schema:
  #             $ref: '#/components/schemas/user'
  #         application/x-www-form-urlencoded:
  #           schema:
  #             $ref: '#/components/schemas/user'
  #       required: true
      # responses:
      #   '200':
      #     description: Successful operation
      #     content:
      #       application/json:
      #         schema:
      #           $ref: '#/components/schemas/user'          
      #       application/xml:
      #         schema:
      #           $ref: '#/components/schemas/user'
      #   '405':
      #     description: Invalid input

  /user:
    get:
      tags:
        - user
      summary: Get all users (Only for admin)
      description: Getting all users
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                items:
                  $ref: '#/components/schemas/user'
    post:
      tags:
        - user
      summary: Create user
      description: For creating user
      requestBody:
        description: Data needed for the new user
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/user'
        required: true
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/user'          
            application/xml:
              schema:
                $ref: '#/components/schemas/user'
        '405':
          description: Invalid input

  /user/login:
    post:
      tags:
        - For login
      summary: To connect in the platform
      requestBody:
        required: true
        description: Data needed to post
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/dataPostUser'
  
  /course:
    get:
      tags:
        - course
      summary: Get all courses
      description: Get all courses
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                # type: object
                items:
                  $ref: '#/components/schemas/Course'          
            application/xml:
              schema:
                # type: object
                items:
                  $ref: '#/components/schemas/Course'
        '400':
          description: Invalid status value
      security:
        - petstore_auth:
            - write:pets
            - read:pets
    post:
      tags:
        - course
      summary: Create a course
      description: Post a course
      requestBody:
        description: Creating new course
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Course'
      responses:
        '200':
          description: Course created successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SuccessResponse'

  # /pet/findByTags:
  #   get:
  #     tags:
  #       - pet
  #     summary: Finds Pets by tags
  #     description: Multiple tags can be provided with comma separated strings. Use tag1, tag2, tag3 for testing.
  #     operationId: findPetsByTags
  #     parameters:
  #       - name: tags
  #         in: query
  #         description: Tags to filter by
  #         required: false
  #         explode: true
  #         schema:
  #           type: array
  #           items:
  #             type: string
  #     responses:
  #       '200':
  #         description: successful operation
  #         content:
  #           application/json:
  #             schema:
  #               type: array
  #               items:
  #                 $ref: '#/components/schemas/Pet'          
  #           application/xml:
  #             schema:
  #               type: array
  #               items:
  #                 $ref: '#/components/schemas/Pet'
  #       '400':
  #         description: Invalid tag value
  #     security:
  #       - petstore_auth:
  #           - write:pets
  #           - read:pets
  # /pet/{petId}:
  #   get:
  #     tags:
  #       - pet
  #     summary: Find pet by ID
  #     description: Returns a single pet
  #     operationId: getPetById
  #     parameters:
  #       - name: petId
  #         in: path
  #         description: ID of pet to return
  #         required: true
  #         schema:
  #           type: integer
  #           format: int64
  #     responses:
  #       '200':
  #         description: successful operation
  #         content:
  #           application/json:
  #             schema:
  #               $ref: '#/components/schemas/Pet'          
  #           application/xml:
  #             schema:
  #               $ref: '#/components/schemas/Pet'
  #       '400':
  #         description: Invalid ID supplied
  #       '404':
  #         description: Pet not found
  #     security:
  #       - api_key: []
  #       - petstore_auth:
  #           - write:pets
  #           - read:pets
  #   post:
  #     tags:
  #       - pet
  #     summary: Updates a pet in the store with form data
  #     description: ''
  #     operationId: updatePetWithForm
  #     parameters:
  #       - name: petId
  #         in: path
  #         description: ID of pet that needs to be updated
  #         required: true
  #         schema:
  #           type: integer
  #           format: int64
  #       - name: name
  #         in: query
  #         description: Name of pet that needs to be updated
  #         schema:
  #           type: string
  #       - name: status
  #         in: query
  #         description: Status of pet that needs to be updated
  #         schema:
  #           type: string
  #     responses:
  #       '405':
  #         description: Invalid input
  #     security:
  #       - petstore_auth:
  #           - write:pets
  #           - read:pets
  #   delete:
  #     tags:
  #       - pet
  #     summary: Deletes a pet
  #     description: delete a pet
  #     operationId: deletePet
  #     parameters:
  #       - name: api_key
  #         in: header
  #         description: ''
  #         required: false
  #         schema:
  #           type: string
  #       - name: petId
  #         in: path
  #         description: Pet id to delete
  #         required: true
  #         schema:
  #           type: integer
  #           format: int64
  #     responses:
  #       '400':
  #         description: Invalid pet value
  #     security:
  #       - petstore_auth:
  #           - write:pets
  #           - read:pets
  # /pet/{petId}/uploadImage:
  #   post:
  #     tags:
  #       - pet
  #     summary: uploads an image
  #     description: ''
  #     operationId: uploadFile
  #     parameters:
  #       - name: petId
  #         in: path
  #         description: ID of pet to update
  #         required: true
  #         schema:
  #           type: integer
  #           format: int64
  #       - name: additionalMetadata
  #         in: query
  #         description: Additional Metadata
  #         required: false
  #         schema:
  #           type: string
  #     requestBody:
  #       content:
  #         application/octet-stream:
  #           schema:
  #             type: string
  #             format: binary
  #     responses:
  #       '200':
  #         description: successful operation
  #         content:
  #           application/json:
  #             schema:
  #               $ref: '#/components/schemas/ApiResponse'
  #     security:
  #       - petstore_auth:
  #           - write:pets
  #           - read:pets
  # /store/inventory:
  #   get:
  #     tags:
  #       - store
  #     summary: Returns pet inventories by status
  #     description: Returns a map of status codes to quantities
  #     operationId: getInventory
  #     responses:
  #       '200':
  #         description: successful operation
  #         content:
  #           application/json:
  #             schema:
  #               type: object
  #               additionalProperties:
  #                 type: integer
  #                 format: int32
  #     security:
  #       - api_key: []
  # /store/order:
  #   post:
  #     tags:
  #       - store
  #     summary: Place an order for a pet
  #     description: Place a new order in the store
  #     operationId: placeOrder
  #     requestBody:
  #       content:
  #         application/json:
  #           schema:
  #             $ref: '#/components/schemas/Order'
  #         application/xml:
  #           schema:
  #             $ref: '#/components/schemas/Order'
  #         application/x-www-form-urlencoded:
  #           schema:
  #             $ref: '#/components/schemas/Order'
  #     responses:
  #       '200':
  #         description: successful operation
  #         content:
  #           application/json:
  #             schema:
  #               $ref: '#/components/schemas/Order'
  #       '405':
  #         description: Invalid input
  # /store/order/{orderId}:
  #   get:
  #     tags:
  #       - store
  #     summary: Find purchase order by ID
  #     description: For valid response try integer IDs with value <= 5 or > 10. Other values will generate exceptions.
  #     operationId: getOrderById
  #     parameters:
  #       - name: orderId
  #         in: path
  #         description: ID of order that needs to be fetched
  #         required: true
  #         schema:
  #           type: integer
  #           format: int64
  #     responses:
  #       '200':
  #         description: successful operation
  #         content:
  #           application/json:
  #             schema:
  #               $ref: '#/components/schemas/Order'          
  #           application/xml:
  #             schema:
  #               $ref: '#/components/schemas/Order'
  #       '400':
  #         description: Invalid ID supplied
  #       '404':
  #         description: Order not found
  #   delete:
  #     tags:
  #       - store
  #     summary: Delete purchase order by ID
  #     description: For valid response try integer IDs with value < 1000. Anything above 1000 or nonintegers will generate API errors
  #     operationId: deleteOrder
  #     parameters:
  #       - name: orderId
  #         in: path
  #         description: ID of the order that needs to be deleted
  #         required: true
  #         schema:
  #           type: integer
  #           format: int64
  #     responses:
  #       '400':
  #         description: Invalid ID supplied
  #       '404':
  #         description: Order not found
  
  # /user/createWithList:
  #   post:
  #     tags:
  #       - user
  #     summary: Creates list of users with given input array
  #     description: Creates list of users with given input array
  #     operationId: createUsersWithListInput
  #     requestBody:
  #       content:
  #         application/json:
  #           schema:
  #             type: array
  #             items:
  #               $ref: '#/components/schemas/User'
  #     responses:
  #       '200':
  #         description: Successful operation
  #         content:
  #           application/json:
  #             schema:
  #               $ref: '#/components/schemas/User'          
  #           application/xml:
  #             schema:
  #               $ref: '#/components/schemas/User'
  #       default:
  #         description: successful operation
  # /user/login:
  #   get:
  #     tags:
  #       - user
  #     summary: Logs user into the system
  #     description: ''
  #     operationId: loginUser
  #     parameters:
  #       - name: username
  #         in: query
  #         description: The user name for login
  #         required: false
  #         schema:
  #           type: string
  #       - name: password
  #         in: query
  #         description: The password for login in clear text
  #         required: false
  #         schema:
  #           type: string
  #     responses:
  #       '200':
  #         description: successful operation
  #         headers:
  #           X-Rate-Limit:
  #             description: calls per hour allowed by the user
  #             schema:
  #               type: integer
  #               format: int32
  #           X-Expires-After:
  #             description: date in UTC when token expires
  #             schema:
  #               type: string
  #               format: date-time
  #         content:
  #           application/xml:
  #             schema:
  #               type: string
  #           application/json:
  #             schema:
  #               type: string
  #       '400':
  #         description: Invalid username/password supplied
  # /user/logout:
  #   get:
  #     tags:
  #       - user
  #     summary: Logs out current logged in user session
  #     description: ''
  #     operationId: logoutUser
  #     parameters: []
  #     responses:
  #       default:
  #         description: successful operation
  # /user/{username}:
  #   get:
  #     tags:
  #       - user
  #     summary: Get user by user name
  #     description: ''
  #     operationId: getUserByName
  #     parameters:
  #       - name: username
  #         in: path
  #         description: 'The name that needs to be fetched. Use user1 for testing. '
  #         required: true
  #         schema:
  #           type: string
  #     responses:
  #       '200':
  #         description: successful operation
  #         content:
  #           application/json:
  #             schema:
  #               $ref: '#/components/schemas/User'          
  #           application/xml:
  #             schema:
  #               $ref: '#/components/schemas/User'
  #       '400':
  #         description: Invalid username supplied
  #       '404':
  #         description: User not found
  #   put:
  #     tags:
  #       - user
  #     summary: Update user
  #     description: This can only be done by the logged in user.
  #     operationId: updateUser
  #     parameters:
  #       - name: username
  #         in: path
  #         description: name that need to be deleted
  #         required: true
  #         schema:
  #           type: string
  #     requestBody:
  #       description: Update an existent user in the store
  #       content:
  #         application/json:
  #           schema:
  #             $ref: '#/components/schemas/User'
  #         application/xml:
  #           schema:
  #             $ref: '#/components/schemas/User'
  #         application/x-www-form-urlencoded:
  #           schema:
  #             $ref: '#/components/schemas/User'
  #     responses:
  #       default:
  #         description: successful operation
  #   delete:
  #     tags:
  #       - user
  #     summary: Delete user
  #     description: This can only be done by the logged in user.
  #     operationId: deleteUser
  #     parameters:
  #       - name: username
  #         in: path
  #         description: The name that needs to be deleted
  #         required: true
  #         schema:
  #           type: string
  #     responses:
  #       '400':
  #         description: Invalid username supplied
  #       '404':
  #         description: User not found
components:
  schemas:
    SuccessResponse:
      type: object
      properties:
        message:
          type: string
          example: "Operation success"
    Order:
      type: object
      properties:
        id:
          type: integer
          format: int64
          example: 10
        petId:
          type: integer
          format: int64
          example: 198772
        quantity:
          type: integer
          format: int32
          example: 7
        shipDate:
          type: string
          format: date-time
        status:
          type: string
          description: Order Status
          example: approved
          enum:
            - placed
            - approved
            - delivered
        complete:
          type: boolean
      xml:
        name: order
    Course:
      type: object
      properties:
        title:
          type: string
          example: "Tacos"
        description:
          type: string
          example: Recipe for tacos
        privacy:
          type: string
          description: To indicate if public or private
          example: public
        author:
          type: string
          description: Id of the user who create course(in Hexadecimal format)
          example: 456858ffcbbaa865468
        link:
          type: string
          description: link of the course
          example: https://www.youtube.com
        stars:
          type: number
          description: indicate the stars's score
          example: 3.5

    Customer:
      type: object
      properties:
        id:
          type: integer
          format: int64
          example: 100000
        username:
          type: string
          example: fehguy
        address:
          type: array
          xml:
            name: addresses
            wrapped: true
          items:
            $ref: '#/components/schemas/Address'
      xml:
        name: customer
    Address:
      type: object
      properties:
        street:
          type: string
          example: 437 Lytton
        city:
          type: string
          example: Palo Alto
        state:
          type: string
          example: CA
        zip:
          type: string
          example: '94301'
      xml:
        name: address
    Category:
      type: object
      properties:
        id:
          type: integer
          format: int64
          example: 1
        name:
          type: string
          example: Dogs
      xml:
        name: category
    User:
      type: object
      properties:
        id:
          type: integer
          format: int64
          example: 10
        username:
          type: string
          example: theUser
        firstName:
          type: string
          example: John
        lastName:
          type: string
          example: James
        email:
          type: string
          example: john@email.com
        password:
          type: string
          example: '12345'
        phone:
          type: string
          example: '12345'
        userStatus:
          type: integer
          description: User Status
          format: int32
          example: 1
      xml:
        name: user
    Tag:
      type: object
      properties:
        id:
          type: integer
          format: int64
        name:
          type: string
      xml:
        name: tag
    user:
      required:
        - username
        - email
        - password
      type: object
      properties:
        username:
          type: string
          example: doggie
        emaill:
          type: string
          example: boozy@gmail.com
        password:
          type: string
        courses:
          type: array
          example: [ "https:\\www.youtube.com" ]
        role:
          type: string
          example: ADMIN
          description: Only required for creating admin. By default the value is "USER"
      
    dataPostUser:
      required:
        - username
        - password
      type: object
      properties:
        usermame:
          type: string
          example: "ihasina"
        password:
          type: string
          example: "izahoIhany1234"

        #category:
          #$ref: '#/components/schemas/Category'
        # photoUrls:
        #   type: array
        #   xml:
        #     wrapped: true
        #   items:
        #     type: string
        #     xml:
        #       name: photoUrl
        # tags:
        #   type: array
        #   xml:
        #     wrapped: true
        #   items:
        #     $ref: '#/components/schemas/Tag'
        # status:
        #   type: string
        #   description: pet status in the store
        #   enum:
        #     - available
        #     - pending
        #     - sold
      xml:
        name: pet
    ApiResponse:
      type: object
      properties:
        code:
          type: integer
          format: int32
        type:
          type: string
        message:
          type: string
      xml:
        name: '##default'
  requestBodies:
    Pet:
      description: Pet object that needs to be added to the store
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Pet'
        application/xml:
          schema:
            $ref: '#/components/schemas/Pet'
    UserArray:
      description: List of user object
      content:
        application/json:
          schema:
            type: array
            items:
              $ref: '#/components/schemas/User'
  securitySchemes:
    petstore_auth:
      type: oauth2
      flows:
        implicit:
          authorizationUrl: https://petstore3.swagger.io/oauth/authorize
          scopes:
            write:pets: modify pets in your account
            read:pets: read your pets
    api_key:
      type: apiKey
      name: api_key
      in: header